# Add these new parameters at the Parameters section:
AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy an EC2 instance, clone a private Git repo, and set up a MAAP app on Docker.

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair for SSH access.
    Type: String

  ECRImageURI:
    Description: URI of the ECR public image
    Type: String

    Description: Name of an existing EC2 KeyPair for SSH access.
    Type: String

  InstanceType:
    Description: EC2 instance type.
    Type: String
    Default: t3.medium
    AllowedValues: [t2.micro, t3.medium, t3.large, t3.xlarge]

  AMIId:
    Description: AMI ID for the instance.
    Type: AWS::EC2::Image::Id
    Default: ami-005fc0f236362e99f

  SubnetId:
    Description: Subnet ID to deploy the instance.
    Type: AWS::EC2::Subnet::Id

  SecurityGroupId:
    Description: Security Group ID to associate with the instance.
    Type: AWS::EC2::SecurityGroup::Id

  VolumeSize:
    Description: Root volume size in GiB.
    Type: Number
    Default: 100

  TagName:
    Description: Name tag for the EC2 instance.
    Type: String
    Default: MAAP-Arcee

  IAMInstanceProfile:
    Description: IAM instance profile ARN.
    Type: String

  GitRepoURL:
    Description: SSH URL for the private Git repository.
    Type: String

  MongoDBClusterName:
    Type: String
    Description: The name of the MongoDB Cluster
    Default: "MongoDBCluster-Arcee"

  MongoDBUserName:
    Type: String
    Description: MongoDB User Name

  MongoDBPassword:
    Type: String
    Description: MongoDB Password

  APIPUBLICKEY:
    Type: String
    Description: MongoDB Atlas API_PUBLIC_KEY

  APIPRIVATEKEY:
    Type: String
    Description: MongoDB Atlas API_PRIVATE_KEY

  GROUPID:
    Type: String
    Description: MongoDB Atlas GROUP_ID

  AWSRegion:
    Description: AWS Region for the EC2 instance.
    Type: String
    Default: us-east-1

  AvailabilityZone:
    Type: String
    Description: EC2 Availability Zone

  EndpointName:
    Type: String
    Description: SageMaker EndpointName

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      ImageId: !Ref AMIId
      SubnetId: !Ref SubnetId
      AvailabilityZone: !Ref AvailabilityZone
      SecurityGroupIds:
        - !Ref SecurityGroupId
      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      Tags:
        - Key: Name
          Value: !Ref TagName
      IamInstanceProfile: !Ref IAMInstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -euo pipefail

          LOG_FILE="/home/ubuntu/deployment.log"
          exec > >(tee -a $LOG_FILE) 2>&1

          echo "Starting instance initialization at $(date)..."

          # Update and install necessary packages
          echo "Updating system packages..."
          if ! sudo apt update -y; then
          echo "System update failed. Continuing..."
          fi

          echo "Installing required packages..."
          if ! sudo apt install -y python3 python3-pip git docker.io docker-compose ksh python3-venv awscli; then
          echo "Package installation failed. Continuing..."
          fi

          

          echo "Deploying MongoDB cluster..."
          chmod +x mongodb_cluster_manager.ksh || echo "Failed to set executable permission for mongodb_cluster_manager.ksh."
          if ! ./mongodb_cluster_manager.ksh deploy "${MongoDBClusterName}" "${MongoDBUserName}" "${MongoDBPassword}"; then
            echo "MongoDB cluster deployment failed. Continuing..."
          fi

          # Deploy MongoDB Vector Index
          echo "Deploying MongoDB Vector Index and inserting data..."
          chmod +x mongodb_create_vectorindex.ksh || echo "Failed to set executable permission for mongodb_create_vectorindex.ksh."
          if ! ./mongodb_create_vectorindex.ksh; then
            echo "MongoDB Vector Index deployment failed. Continuing..."
          fi

          # Add current user to the docker group
          echo "Configuring Docker..."
          if ! sudo usermod -aG docker ubuntu; then
          echo "Failed to add user to Docker group. Continuing..."
          fi
          sudo chmod 666 /var/run/docker.sock
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes

          # Pull image from ECR Public
          echo "Pulling image from ECR Public..."
          if ! docker pull ${ECRImageURI}; then
          echo "Failed to pull ECR image. Exiting."
          exit 1
          fi

          # Run the container
          echo "Starting Docker container..."
          if ! docker run -d \
          --name maap-app \
          -p 8501:8501 \
          ${ECRImageURI}; then
          echo "Failed to start container. Exiting."
          exit 1
          fi

          echo "Instance initialization completed at $(date)."

Outputs:
  InstanceId:
    Description: Instance ID of the deployed EC2 instance.
    Value: !Ref EC2Instance

  PublicDNS:
    Description: Public DNS of the deployed EC2 instance.
    Value: !GetAtt EC2Instance.PublicDnsName

  EC2PublicIP:
    Description: Public IPv4 address of the EC2 instance
    Value: !GetAtt EC2Instance.PublicIp